import { doc, win } from "$src/automation/exploits/references";
import { asyncWait } from "$server/utils/asyncUtils";

export class InfiltrationMocks {
  private originalSetInterval = win.setInterval;
  private originalDocumentAddListener = doc.addEventListener;

  private keyDownMockHandler: (e: any) => void;

  public mockGlobalMethods() {
    win.setInterval = (handler, timeout, ...args) => {
      if (!/\.onExpire\(\)/.test(handler.toString()))
        return this.originalSetInterval.call(win, handler, timeout, ...args);
      return 0;
    };
    doc.addEventListener = (type, listener, options) => {
      if (type === "keydown" && /\.onKeyDown\.bind/.test(listener.toString())) {
        this.keyDownMockHandler = listener;
      }
      this.originalDocumentAddListener.call(doc, type, listener, options);
    };
  }

  public enterKey(key: string) {
    this.keyDownMockHandler?.({
      key,
      isTrusted: true,
      preventDefault: () => {
        // mock
      },
    });
    return asyncWait(100);
  }

  public revertGlobalMethods() {
    win.setInterval = this.originalSetInterval;
    doc.addEventListener = this.originalDocumentAddListener;
  }
}
