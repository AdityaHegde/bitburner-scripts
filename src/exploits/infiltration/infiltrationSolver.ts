import type { InfiltrationMocks } from "$src/exploits/infiltration/InfiltrationMocks";
import { clickButtonWithText, getButtonWithText } from "$src/automation/exploits/interactions";
import { gotoLocation } from "$src/automation/exploits/goto";
import { doc } from "$src/automation/exploits/references";
import { asyncWait } from "$server/utils/asyncUtils";
import type { InfiltrationSolverFunction } from "$src/exploits/infiltration/solvers/keyCodes";
import { closeTheBrackets } from "$src/exploits/infiltration/solvers/closeTheBrackets";
import { minesweeper } from "$src/exploits/infiltration/solvers/minesweeper";
import { typeBackwards } from "$src/exploits/infiltration/solvers/typeBackwards";
import { complimentGuard } from "$src/exploits/infiltration/solvers/complimentGuard";
import { matchSymbols } from "$src/exploits/infiltration/solvers/matchSymbols";
import { cheatCode } from "$src/exploits/infiltration/solvers/cheatCode";
import { attackGuard } from "$src/exploits/infiltration/solvers/attackGuard";
import { wireCutting } from "$src/exploits/infiltration/solvers/wireCutting";

const InfiltrationNameMap: Record<string, InfiltrationSolverFunction> = {
  "Close the brackets": closeTheBrackets,
  "Remember all the mines!": minesweeper,
  "Type it backward": typeBackwards,
  "Type it": typeBackwards,
  "Say something nice about the guard": complimentGuard,
  "Match the symbols!": matchSymbols,
  "Enter the Code!": cheatCode,
  "Attack when his guard is down!": attackGuard,
  "Cut the wires with the following properties! (keyboard 1 to 9)": wireCutting,
};

export async function infiltrationSolver(mocks: InfiltrationMocks, label: string, num: number) {
  await gotoLocation(label, num);
  await clickButtonWithText("Infiltrate Company");

  mocks.mockGlobalMethods();
  await clickButtonWithText("Start");

  // eslint-disable-next-line no-constant-condition
  while (true) {
    await asyncWait(500);

    let infiltrationBody = doc.querySelector(
      "div.MuiContainer-root div.MuiPaper-root:nth-child(3)",
    ) as HTMLElement;
    if (!infiltrationBody) {
      infiltrationBody = doc.querySelector(
        "div.MuiContainer-root div.MuiPaper-root:nth-child(2)",
      ) as HTMLElement;
    }
    if (!infiltrationBody) {
      const cancelInfiltrationButton = getButtonWithText("Cancel Infiltration");
      if (!cancelInfiltrationButton) break;
      continue;
    }

    const title = infiltrationBody.querySelector("h4")?.textContent.trim();
    if (!title || title === "Get Ready!") continue;
    if (title === "Infiltration successful!") {
      infiltrationBody.querySelectorAll("button")[1].click();
      break;
    }

    await InfiltrationNameMap[title](mocks, infiltrationBody);
  }

  mocks.revertGlobalMethods();
}
